{"version":3,"file":"awslambda-auto.js","sources":["../../../src/awslambda-auto.ts"],"sourcesContent":["import { getDefaultIntegrations as getNodeDefaultIntegrations } from '@sentry/node';\nimport { init, tryPatchHandler } from './sdk';\n\nconst lambdaTaskRoot = process.env.LAMBDA_TASK_ROOT;\nif (lambdaTaskRoot) {\n  const handlerString = process.env._HANDLER;\n  if (!handlerString) {\n    throw Error(`LAMBDA_TASK_ROOT is non-empty(${lambdaTaskRoot}) but _HANDLER is not set`);\n  }\n\n  init({\n    // We want to load the performance integrations here, if the tracesSampleRate is set for the layer in env vars\n    // Sentry node's `getDefaultIntegrations` will load them if tracing is enabled,\n    // which is the case if `tracesSampleRate` is set.\n    // We can safely add all the node default integrations\n    integrations: getNodeDefaultIntegrations(\n      process.env.SENTRY_TRACES_SAMPLE_RATE\n        ? {\n            tracesSampleRate: parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE),\n          }\n        : {},\n    ),\n  });\n\n  tryPatchHandler(lambdaTaskRoot, handlerString);\n} else {\n  throw Error('LAMBDA_TASK_ROOT environment variable is not set');\n}\n"],"names":["init","getNodeDefaultIntegrations","tryPatchHandler"],"mappings":";;;AAGA,MAAM,iBAAiB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAA;AACnD,IAAI,cAAc,EAAE;AACpB,EAAE,MAAM,aAAc,GAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAA;AAC5C,EAAE,IAAI,CAAC,aAAa,EAAE;AACtB,IAAI,MAAM,KAAK,CAAC,CAAC,8BAA8B,EAAE,cAAc,CAAC,yBAAyB,CAAC,CAAC,CAAA;AAC3F,GAAE;AACF;AACA,EAAEA,QAAI,CAAC;AACP;AACA;AACA;AACA;AACA,IAAI,YAAY,EAAEC,2BAA0B;AAC5C,MAAM,OAAO,CAAC,GAAG,CAAC,yBAAA;AAClB,UAAU;AACV,YAAY,gBAAgB,EAAE,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;AAC/E,WAAU;AACV,UAAU,EAAE;AACZ,KAAK;AACL,GAAG,CAAC,CAAA;AACJ;AACA,EAAEC,mBAAe,CAAC,cAAc,EAAE,aAAa,CAAC,CAAA;AAChD,CAAA,MAAO;AACP,EAAE,MAAM,KAAK,CAAC,kDAAkD,CAAC,CAAA;AACjE;;"}